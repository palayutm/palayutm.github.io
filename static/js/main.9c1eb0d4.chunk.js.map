{"version":3,"sources":["contest_calendar.js","index.js"],"names":["ContestCalendar","props","state","show_name","selected","api_name","contests","update_contests","duration","seconds","parseInt","days","Math","floor","days_s","hours","slice","minutes","utcTime","givenDate","Date","Intl","DateTimeFormat","dateStyle","timeStyle","format","obj","name","url","start_time","this","localTimeFromUtc","durationToText","status","i","length","fetch","then","response","json","data","push","create_contest","setState","catch","error","console","sort","a","b","Paper","Table","TableHead","TableRow","TableCell","TableBody","map","row","href","idx","Array","keys","FormControl","component","FormGroup","aria-label","x","FormControlLabel","control","Checkbox","color","label","checked","labelPlacement","onChange","id","event","ns","target","renderTable","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9c1eb0d4.chunk.js","sourcesContent":["import React from \"react\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\n\nclass ContestCalendar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      show_name: [\"Codeforces\", \"TopCoder\", \"AtCoder\", \"CodeChef\"],\n      selected: [true, false, false, false],\n      api_name: [\"codeforces\", \"top_coder\", \"at_coder\", \"code_chef\"],\n      contests: []\n    };\n    this.update_contests();\n  }\n\n  durationToText(duration) {\n    if (duration === \"-\") return \"-\";\n\n    var seconds = parseInt(duration);\n\n    var days = Math.floor(seconds / (24 * 60 * 60));\n    var days_s = \"days\";\n    if (days === 1) days_s = \"day\";\n    seconds %= 24 * 60 * 60;\n\n    var hours = Math.floor(seconds / (60 * 60));\n    hours = (\"0\" + hours).slice(-2);\n    seconds %= 60 * 60;\n\n    var minutes = Math.floor(seconds / 60);\n    minutes = (\"0\" + minutes).slice(-2);\n\n    if (days > 0) return `${days} ${days_s} and ${hours}:${minutes}`;\n    else return `${hours}:${minutes}`;\n  }\n\n  localTimeFromUtc(utcTime) {\n    if (utcTime === \"-\") return \"-\";\n    var givenDate = new Date(utcTime);\n    var localDateString = new Intl.DateTimeFormat(\"en-US\", {\n      dateStyle: \"medium\",\n      timeStyle: \"long\"\n    }).format(givenDate);\n    return localDateString;\n  }\n\n  create_contest(obj) {\n    return {\n      name: obj[\"name\"],\n      url: obj[\"url\"],\n      start_time: this.localTimeFromUtc(obj[\"start_time\"]),\n      duration: this.durationToText(obj[\"duration\"]),\n      status: obj[\"status\"]\n    };\n  }\n\n  update_contests() {\n    var contests = [];\n    for (var i = 0; i < this.state.show_name.length; i++) {\n      if (this.state.selected[i]) {\n        var url = \"https://www.kontests.net/api/v1/\" + this.state.api_name[i];\n        fetch(url)\n          .then(response => response.json())\n          .then(data => {\n            for (var obj of data) {\n              contests.push(this.create_contest(obj));\n            }\n            this.setState({ contests: contests });\n          })\n          .catch(error => {\n            // handle your errors here\n            console.error(error);\n          });\n      }\n    }\n  }\n\n  renderTable() {\n    this.state.contests.sort(function(a, b) {\n      return new Date(a.start_time) - new Date(b.start_time);\n    });\n    return (\n      <Paper>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Name</TableCell>\n              <TableCell>Start time</TableCell>\n              <TableCell>Duration</TableCell>\n              <TableCell>Status</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {this.state.contests.map(row => (\n              <TableRow>\n                <TableCell>\n                  <a href={row.url}>{row.name}</a>\n                </TableCell>\n                <TableCell>{row.start_time}</TableCell>\n                <TableCell>{row.duration}</TableCell>\n                <TableCell>{row.status}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </Paper>\n    );\n  }\n\n  render() {\n    const handleChange = id => event => {\n      var ns = this.state.selected;\n      ns[id] = event.target.checked;\n      this.setState({ selected: ns });\n      this.update_contests();\n    };\n    var idx = [...Array(this.state.show_name.length).keys()];\n    return (\n      <div>\n        <FormControl component=\"fieldset\">\n          <FormGroup aria-label=\"position\" name=\"position\" row>\n            {idx.map(x => (\n              <FormControlLabel\n                control={<Checkbox color=\"primary\" />}\n                label={this.state.show_name[x]}\n                checked={this.state.selected[x]}\n                labelPlacement=\"start\"\n                onChange={handleChange(x)}\n              />\n            ))}\n          </FormGroup>\n        </FormControl>\n        {this.renderTable()}\n      </div>\n    );\n  }\n}\n\nexport default ContestCalendar;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ContestCalendar from \"./contest_calendar.js\";\n\nReactDOM.render(<ContestCalendar />, document.getElementById(\"root\"));\n"],"sourceRoot":""}